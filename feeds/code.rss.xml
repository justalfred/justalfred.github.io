<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Just Alfred</title><link>http://blog.justalfred.com/</link><description></description><lastBuildDate>Wed, 20 Jul 2016 00:00:00 -0400</lastBuildDate><item><title>PyGotham 2016</title><link>http://blog.justalfred.com/pygotham-2016.html</link><description>&lt;p&gt;I wish I could make all this prettier, but I gave a talk at
&lt;a href="https://2016.pygotham.org/"&gt;PyGotham&lt;/a&gt;.
It&amp;#8217;s not my best work since I&amp;#8217;m not actually terribly experienced with the
subject matter. But it does represent packaged knowledge that I wish I had
when I was getting started with&amp;nbsp;Spark.&lt;/p&gt;
&lt;p&gt;A few people asked for slides, so this is my attempt to post them. I&amp;#8217;m not
bothering with making reveal.js work, so it&amp;#8217;s all one long html doc. Sorry
it&amp;#8217;s not prettier. I know what pretty looks like; I don&amp;#8217;t know how to make
pretty&amp;nbsp;things.&lt;/p&gt;
&lt;p&gt;Well, for what it&amp;#8217;s worth, I present to you
&lt;a href="http://blog.justalfred.com/html/PyGotham2016.html"&gt;the slides&lt;/a&gt;
to &amp;#8220;Spark Dataframes for the Pandas&amp;nbsp;Pro&amp;#8221;. &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Just Alfred</dc:creator><pubDate>Wed, 20 Jul 2016 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:blog.justalfred.com,2016-07-20:pygotham-2016.html</guid><category>Code</category></item><item><title>Does Not Compute</title><link>http://blog.justalfred.com/does-not-compute.html</link><description>&lt;p&gt;&lt;em&gt;Originally published at: &lt;a href="http://kwontum.blogspot.com/2013/10/does-not-compute.html"&gt;http://kwontum.blogspot.com/2013/10/does-not-compute.html&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s talk about language. How amazing is it that using sounds or
symbols, we can implant in another person&amp;#8217;s mind an entirely new state?
We can describe a place that person has never seen, we can construct a
belief that person has never considered, we can convey an emotion that
person has never&amp;nbsp;felt.  &lt;/p&gt;
&lt;p&gt;But not without errors in transmission. Remember the game, &amp;#8220;telephone&amp;#8221;?
Why can&amp;#8217;t language be more precise? Let me try to explain this in an
unconventional way and see what it means for programming languages.&lt;br /&gt;
&lt;a name="more"&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;Imagine a language in which the intent of the communicator is completely
unambiguous to a qualified listener. I&amp;#8217;ll use &lt;span class="caps"&gt;CD&lt;/span&gt; audio recordings as an
illustration. With good enough equipment, a listener can hear a
soundscape that is indistinguishable from the&amp;nbsp;original.  &lt;/p&gt;
&lt;p&gt;But most people don&amp;#8217;t listen to CDs anymore. They listen to streaming or
downloaded music. The major difference is that these recordings are
compressed. Those parts of the audio signal that people can&amp;#8217;t hear well
are removed. This leads to degradation of the signal, but much, much
less information is required while most people never notice. So it&amp;#8217;s a
worthwhile tradeoff. In fact, there&amp;#8217;s a whole class of &lt;a href="http://en.wikipedia.org/wiki/Category:Probabilistic_data_structures"&gt;probabilistic
data
structures&lt;/a&gt; in
computer science that sacrifice accuracy for performance and&amp;nbsp;size.  &lt;/p&gt;
&lt;p&gt;Likewise, human languages have each been reduced to use only a subset of
all possible
&lt;a href="http://en.wikipedia.org/wiki/International_Phonetic_Alphabet"&gt;sounds&lt;/a&gt;
and symbols. Take the word, &amp;#8220;hot&amp;#8221;. Here&amp;#8217;s a list of things that can be
described as hot: fire, chile pepper, horseradish, supermodel,
basketball player, a fashion trend, the color of a room. In English, we
use this single, overloaded word to represent this array of meanings.
Yet we&amp;#8217;re rarely confused due to our evolved talents for lexical
ambiguity resolution (as so wonderfully explained by my new colleague
&lt;a href="http://jennazeigen.com/lexical.jpg"&gt;here&lt;/a&gt;).  &lt;/p&gt;
&lt;p&gt;In other words, when a word can take multiple meanings, we&amp;#8217;re
terrifically adept at taking context into account to disambiguate the
intended meaning. This permits us to compress our language into a
manageable size. More importantly, it permits us to be sloppy. The
sentence, &amp;#8220;I ain&amp;#8217;t git no donuts, but I gotta coke,&amp;#8221; is completely
understandable despite all the&amp;nbsp;errors.  &lt;/p&gt;
&lt;p&gt;Computers aren&amp;#8217;t like us. Computers are purely logical units that
mindlessly apply instructions to data because they have no governing
mind. At the processor level, they have no innate capacity to correct
erroneous instructions or to resolve ambiguities. This is what makes
coding hard. A sentence like &amp;#8220;Come to the kitchen&amp;#8221; is perfectly
understandable to us since we can guess there is supposed to be a period
at the end to indicate the sentence has ended. A computer would say the
sentence never finished so the instruction cannot be
processed. (Interestingly, there are companies that hire adults with
autism or Asperger&amp;#8217;s since they are often exceptional at handling and
debugging&amp;nbsp;code.)  &lt;/p&gt;
&lt;p&gt;For the beginning programmer, I think this is an obvious, but useful
insight. Sort of like realizing the center squares of a Rubik&amp;#8217;s cube
don&amp;#8217;t move: those center squares cease to be puzzle pieces and become
stationary references to guide your manipulations. The stupid silicon
insight sets an exacting reference from which one can evaluate one&amp;#8217;s own
code. Instead of wondering why the dumb computer didn&amp;#8217;t get what he was
(not) clearly telling it to do, the novice can expend that brainpower on
avoiding the typos and syntax errors whose importance he now&amp;nbsp;understands.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Just Alfred</dc:creator><pubDate>Fri, 04 Oct 2013 00:30:00 -0400</pubDate><guid isPermaLink="false">tag:blog.justalfred.com,2013-10-04:does-not-compute.html</guid><category>The Classical-Kwontum Interface</category><category>Code</category></item></channel></rss>